// DAZ Install Manager Product Lister
// Reads DIM manifest files to list all installed products

var dimManifestPath =
  "C:/Users/Public/Documents/DAZ 3D/InstallManager/ManifestFiles";

// MOVED: extractXMLTag function needs to be declared BEFORE parseManifestFile
function extractXMLTag(xmlContent, tagName) {
  try {
    // Try both self-closing and regular tags
    var patterns = [
      new RegExp("<" + tagName + '\\s+VALUE="([^"]*)"/?>', "i"),
      new RegExp("<" + tagName + "[^>]*>([^<]+)</" + tagName + ">", "i"),
      new RegExp("<" + tagName + ">([^<]+)</" + tagName + ">", "i"),
    ];

    for (var i = 0; i < patterns.length; i++) {
      var match = String(xmlContent).match(patterns[i]);
      if (match && match[1]) {
        return String(match[1]).trim();
      }
    }
  } catch (e) {
    // Silent fail for XML parsing errors
  }

  return null;
}

function parseManifestFile(manifestPath) {
  try {
    var file = new DzFile(manifestPath);
    if (!file.open(DzFile.ReadOnly)) {
      return null;
    }

    // Read the entire file content
    var content = "";
    while (!file.eof()) {
      content += file.readLine() + "\n";
    }
    file.close();

    // Extract product information using XML-like parsing
    var productName = extractXMLTag(content, "ProductName");
    var sku =
      extractXMLTag(content, "ProductStoreIDX") ||
      extractXMLTag(content, "ProductID");
    var artist = extractXMLTag(content, "ArtistName");
    var version = extractXMLTag(content, "ProductVersion");
    var installDate = extractXMLTag(content, "InstallDate");
    var productType = extractXMLTag(content, "ProductType");
    var description = extractXMLTag(content, "ProductDescription");

    // Only return if we found at least a product name
    if (productName) {
      return {
        name: String(productName).trim(),
        sku: String(sku || "Unknown").trim(),
        artist: String(artist || "Unknown").trim(),
        version: String(version || "Unknown").trim(),
        installDate: String(installDate || "Unknown").trim(),
        productType: String(productType || "Unknown").trim(),
        description: String(description || "").trim(),
        manifestFile: manifestPath,
      };
    }
  } catch (e) {
    print("Error parsing manifest: " + manifestPath + " - " + e.message);
  }

  return null;
}

function getInstalledProducts() {
  print("=== DAZ Install Manager Product Lister ===");

  var products = [];

  // Check if DIM manifest directory exists
  var dimDir = new DzDir(dimManifestPath);
  if (!dimDir.exists()) {
    print("ERROR: DIM manifest directory not found at: " + dimManifestPath);
    MessageBox.information(
      "DIM manifest directory not found!\nExpected location: " +
        dimManifestPath +
        "\n\nPlease check your DAZ Install Manager installation.",
      "Directory Not Found",
      "&OK"
    );
    return [];
  }

  print("Reading manifest files from: " + dimManifestPath);

  // Get all manifest files
  var files = dimDir.entryList(DzDir.Files);
  var manifestCount = 0;

  for (var i = 0; i < files.length; i++) {
    var fileName = String(files[i]);

    // DIM manifest files are typically .dsx files
    if (fileName.toLowerCase().endsWith(".dsx")) {
      var manifestPath = dimManifestPath + "/" + fileName;
      var product = parseManifestFile(manifestPath);

      if (product) {
        print(
          "Found product: " +
            product.name +
            " (SKU: " +
            product.sku +
            ", Version: " +
            product.version +
            ")"
        );
        products.push(product);
        manifestCount++;

        // Print progress every 100 files
        if (manifestCount % 100 === 0) {
          print("Processed " + manifestCount + " manifests...");
        }
      }
    }
  }

  print("Processed " + manifestCount + " manifest files");
  print("Found " + products.length + " products");

  // Sort products by name
  products.sort(function (a, b) {
    return a.name.localeCompare(b.name);
  });

  return products;
}
